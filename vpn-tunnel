#!/bin/bash

set -eu

# *** Configuration ***

# read an optional config overriding the defaults
configpath=/etc/chj/vpn-tunnel.sh
if [ -f "$configpath" ]; then
    source "$configpath"
fi

# set defaults:

# sshserver is a hostname, either fully qualified or a hostname
# definition in the ssh client configuration
sshserver=${sshserver-servi}

# Options fed to openvpn
openvpn_compression=${openvpn_compression-'--comp-lzo adaptive'}

server_port=${server_port-1194}

# (Static) network configuration for the VPN
network=${network-192.168.200}
ip_client=${ip_client-$network.5}
ip_server=${ip_server-$network.1}

dev=${dev-tun1}

if ! type get_clientlocalip >/dev/null 2>&1; then
    get_clientlocalip () {
	is_if_up eth0 || is_if_up eth3 || is_if_up wlan0 \
	    || is_if_up ppp0 || is_if_up usb0 || {
	    echo "no known interface is up" >&2
	    false
	}
    }
fi

# the client_id is used to differentiate multiple clients for the same
# server (which still need some other work to be done to work,
# though), and different clients / client configurations on the same
# client host. By default, it is a hash calculated from the inputs fed
# to the openvpn instance.
client_id () {
    client_id=${client_id-"_$(client_hash)"}
    echo "$client_id"
}

# var base directory
client_varbase () {
    client_varbase=${client_varbase-"$(
	local d="/var/run/vpn-tunnel$(client_id)"
	if [ ! -d "$d" ]; then
	    (
		umask 077 # not really necessary though
		mkdir "$d"
	    )
	fi
	echo "$d"
    )"}
    echo "$client_varbase"
}

# logging options; you may want to put this in /var/log/ instead, I
# was too lazy to set up log rotate and cleaning up /root/tmp already
# regularly
logfile () {
    logfile=${logfile-"/var/log/vpn-tunnel$(client_id).log"}
    echo "$logfile"
}
verb=${verb-"--verb 1"}

# user/group to run openvpn as; also use --chroot option to an
# existing directory
usergroupchroot=${usergroupchroot-"--user chrisopenvpn --group chrisopenvpn \
    --chroot /usr/share/doc/openvpn/examples/sample-config-files/"}

# in an attempt to reduce the risk for the key landing on disk, use a
# tmpfs
tempfilecmd=${tempfilecmd-"tempfile -d /lib/init/rw/"}

# End of configuration.

# ------------------------------------------------------------

# If sshserver is just a hostname, resolve it by looking it up in the
# ssh client configuration
if echo "$sshserver" | grep -F . >/dev/null; then
    fqserver="$sshserver"
else
    fqserver="`ssh_config-ref "$sshserver" hostname`"
fi

quote () {
    printf '%q' "$1"
}


# doing/done messages:
prev_done="-"

printdone () {
    if [ "$prev_done" != "-" ]; then
	eval "echo $prev_done."
    fi
}

=== () {
    local msg="$1"
    local done="${2-done}"

    printdone
    prev_done="$done"
    echo -en "* $msg: "
}

===. () {
    printdone
    prev_done="-"
    echo OK.
}


usage () {
    set +x
    echo "usage: $0 start|stop|restart|startrouting|stoprouting|restartrouting|status"
    echo " stoprouting doesn't stop openvpn on either server or client,"
    echo "   it just stops the routing of traffic through the VPN. It"
    echo "   should be called when the client goes to sleep or when the"
    echo "   host interface goes down. startrouting will then (try to)"
    echo "   resume the routing over the running openvpn instances."
    echo " status shows whether the tunnel seems to be activated;"
    echo "   it doesn't test the connection though, but just checks"
    echo "   whether the current resolv.conf is ours."
    exit 1
}

# openvpn invocations ('returning' bash code): (These can be fed a
# fake value that will override variables that are not known in stop
# invocations, for the purpose of generating a stable hash value for
# daemonize.)

openvpn_invocation_client () {
    local keyfile_client="${1-"$keyfile_client"}"
    echo "openvpn $openvpn_compression --remote "$fqserver" --dev $dev " \
	"--ifconfig $(quote "$ip_client") $(quote "$ip_server") $verb " \
	"--secret $(quote "$keyfile_client") $usergroupchroot"
}

openvpn_invocation_server () {
    local keyfile_server="${1-"$keyfile_server"}"
    echo "openvpn $openvpn_compression --float --dev $dev " \
	"--ifconfig $(quote "$ip_server") $(quote "$ip_client") $verb " \
	"--secret $(quote "$keyfile_server") $usergroupchroot"
}

# an ID we're using to identify our resources (vpn-tunnel instance)
client_hash () {
    openvpn_invocation_client stable | sha1sum | awk '{print $1}'
}

# handling resolv.conf:
# the original is kept at
resolv_conf_orig () {
    echo /etc/resolv.conf.vpn-tunnel_orig"$(client_id)"
}
# and /etc/resolv.conf is replaced with a symlink to
resolv_conf_ours () {
    echo /etc/resolv.conf.vpn-tunnel_ours"$(client_id)"
}
# and the symlink is checked to avoid moving our own setting to
# resolv_conf_orig in cases of double starts.

do_resolv_ours () {
    local ours="$1"
    mv /etc/resolv.conf "$(resolv_conf_orig)"
    ln -s "$ours" /etc/resolv.conf
}

resolv_is_ours () {
    local ours=${1-"$(resolv_conf_ours)"}
    if to=$(readlink /etc/resolv.conf); then
	[ "$to" = "$ours" ]
    else
	false
    fi
}

resolv_orig () {
    local orig=$(resolv_conf_orig)
    # only if it exists? well, should always exist when this is
    # called, and/else the caller will accept that this fails
    mv "$orig" /etc/resolv.conf
}

copy_resolv_conf () {
    local saved="$(resolv_conf_ours)".saved
    # only if it exists (which won't be the case in the first 'start')
    if [ -f "$saved" ]; then
	local tmp=`tempfile -d /etc/`
	cat "$saved" > "$tmp"
	chmod a+r "$tmp"
	mv "$tmp" "$(resolv_conf_ours)"
    fi
}

resolv_ours () {
    local ours=$(resolv_conf_ours)
    if ! resolv_is_ours "$ours"; then
	do_resolv_ours "$ours"
    fi
    copy_resolv_conf
}

status () {
    # on | off | want_on | want_off
    local f="$(client_varbase)"/status
    if [ -e "$f" ]; then
	cat "$f"
    else
	# initial value
	echo off
    fi
}

set_status () {
    echo "$1" > "$(client_varbase)"/status
}

want () {
    set_status "want_$1"
}


# The code generated by masq_code is run on the *server*

masq_code_() {
    echo "iptables -t nat \"$1\" POSTROUTING -p all \\"
    echo   "-s \"$2\" \\! -d \"$2\" -j MASQUERADE"
}

masq_code() {
    masq_code_ "$1" "$ip_client"
}


# rules matching exceptional traffic that should *not* go through the
# VPN:
iptables_AD () {
    local AD="$1"
    local clientlocalip="$2"
    # DHCP
    iptables -t mangle "$AD" OUTPUT -p udp --dport 67 \
	-j MARK --set-mark 0x1
    # openvpn's own traffic
    iptables -t mangle "$AD" OUTPUT -p udp --dport "$server_port" \
	-j MARK --set-mark 0x1

    # for those marked, correct the source IP, as that's $ip_client
    # now by default
    iptables -t nat "$AD" POSTROUTING -m mark --mark 1 \
	-j SNAT --to-source "$clientlocalip"
}


startrouting () {
    === "setting up routing on the client"
    # ! don't forgret to add cleanup in stop procedure for things you add here !

    local clientlocalip=$(get_clientlocalip)
    echo "$clientlocalip" > "$(client_varbase)"/clientlocalip

    # remove previous default route (and further down replace it with
    # a default route through the VPN)
    dfltroute=`ip route list | grep ^default`
    echo "$dfltroute" > "$(client_varbase)"/dfltroute
    ip route del $dfltroute

    # but re-add previous default route for the exceptional traffic
    # marked by iptables_AD
    ip route add $dfltroute table 1
    ip rule add fwmark 1 lookup 1

    iptables_AD -A "$clientlocalip"

    # now that the exceptions are activated, add new default route via
    # VPN; have to retry until openvpn actually created the interface
    result=`tempfile`
    i=10
    ok=0
    while [ "$i" -gt 0 ]; do
	if ip route add default via "$ip_server" > "$result" 2>&1; then
	    ok=1
	    i=0
	else
	    sleep 1
	    i=$(( $i - 1 ))
	fi
    done
    if [ "$ok" -eq 0 ]; then
	cat "$result"
	stoprouting || true
	false
    fi

    resolv_ours
}

stoprouting () {
    === "remove iptables routing entries"
    local clientlocalip=$(cat "$(client_varbase)"/clientlocalip)

    iptables_AD -D "$clientlocalip" || true
    ip rule del fwmark 1 lookup 1 || true

    # wow, bash misses the check for the result of cat if I say "if
    # local dfltroute=...". Thus, make it local beforehand:
    local dfltroute;
    if dfltroute=$(cat "$(client_varbase)"/dfltroute); then
	# move original default route back to default table
	ip route del $dfltroute table 1 || true
	curdfltroute=`ip route list | grep ^default`
	ip route del $curdfltroute || true
	ip route add $dfltroute || true
    fi
    
    === "restore /etc/resolv.conf"
    resolv_orig || true
}


start () {
    #set -x
    
    modprobe tun
    # not sure whether these are needed?:
    modprobe nf_conntrack_sip
    modprobe nf_nat_sip
    
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    keyfile_client=`$tempfilecmd`

    === "generating key"
    openvpn --genkey --secret "$keyfile_client"

    === "copying key to server\n" -
    keyfile_server=$(ssh root@"$sshserver" "$tempfilecmd")

    scp -p "$keyfile_client" root@"$sshserver":"$keyfile_server"
    
    === "starting remote openvpn instance" -
    ssh "$sshserver" 'set -eu
        modprobe tun
	modprobe nf_conntrack_sip
	modprobe nf_nat_sip
        echo 1 > /proc/sys/net/ipv4/ip_forward
        '"daemonize --out $(quote "$(logfile)") --restart --bg --no-nice \\
	--hash-input $(quote "$(openvpn_invocation_server stable)") \\
	$(openvpn_invocation_server)"'
	'"$(masq_code -A)"'
	'

    === "starting local openvpn instance" -
    # (amazingly, set -e is in effect within the eval)
    eval "daemonize --out $(quote "$(logfile)") --restart --bg --no-nice \\
        --hash-input $(quote "$(openvpn_invocation_client stable)") \\
        $(openvpn_invocation_client)"


    startrouting
    
    === "wait until started"

    # remove keyfiles quickly (they won't be accessible by the openvpn
    # binary after chroot anyway)
    i=20
    ok=0
    while [ "$i" -gt 0 ]; do
	if ping -q -w1 "$ip_server" > /dev/null; then
	    ok=1
	    i=0 #our [only] way to break, right??
	else
	    sleep 1
	    i=$(( $i - 1 ))
	fi
    done
    if [ "$ok" -eq 0 ]; then
	echo "could not get ping reply" >&2
	false
    fi

    === "cleanup"
    rm -f "$keyfile_client"
    ssh "$sshserver" "rm -f \"$keyfile_server\""
    
    === "copy over /etc/resolv.conf"
    # this just updates the file that's already there from previous
    # invocations
    tmp=`tempfile -d /etc/`
    ssh "$sshserver" 'cat /etc/resolv.conf' > "$tmp"
    # keep this in a file that *won't* be directly linked,
    # so that 'startrouting' can re-copy these contents
    mv "$tmp" "$(resolv_conf_ours)".saved
    copy_resolv_conf
}


stop () {
    #set -x

    # stop openvpn *before* removing the routing, to avoid window of
    # loop

    === "stop openvpn on client"
    eval "daemonize --stop \\
        --hash-input $(quote "$(openvpn_invocation_client stable)") \\
	fakecmd" || true


    stoprouting
    
    === "stop openvpn on server"
    ssh "$sshserver" 'set -eu
        '"daemonize --stop \\
	--hash-input $(quote "$(openvpn_invocation_server stable)") \\
	fakecmd || true"'
    	'"$(masq_code -D)"' || true
	' || true

}


if [ $# -ne 1 ]; then
    usage
fi


_startrouting () {
    status=$(status)
    if [ "$status" = on ]; then
	echo "seems to already be on" >&2
	false
    else
	startrouting
    fi
}

_stoprouting () {
    status=$(status)
    if [ "$status" = on -o "$status" = want_off ]; then
	stoprouting
    else
	echo "seems to already be off" >&2
	false
    fi
}

_restart () {
    stoprouting # || true
    start
}

_restartrouting () {
    stoprouting # || true
    start
}

	
case "$1" in
    start)
      want on
      start
      set_status on
      ===.;;
    stop)
      want off
      stop
      set_status off
      ===.;;
    startrouting)
      _startrouting
      ===.;;
    stoprouting)
      _stoprouting
      ===.;;
    restart*if*running)
      status=$(status)
      if [ "$status" = on -o "$status" = want_on ]; then
	  _restart
	  set_status on
	  ===.
      else
          echo "not running"
      fi
      ;;
    restart)
      _restart
      set_status on
      ===.;;
    restartrouting)
      _restartrouting
      ===.;;
    status)
      status
      ;;
    *)
      usage;;
esac
