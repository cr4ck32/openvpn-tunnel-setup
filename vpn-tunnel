#!/bin/bash

set -eu

# *** Configuration ***

# sshserver is a hostname, either fully qualified or a hostname
# definition in the ssh client configuration
sshserver=servi

# Options fed to openvpn
openvpn_compression='--comp-lzo adaptive'
openvpn_port=1194

# (Static) network configuration for the VPN
network=192.168.200
ip_client=$network.5
ip_server=$network.1

dev=tun1

get_clientlocalip () {
    is_if_up eth0 || is_if_up eth3 || is_if_up wlan0 \
	|| is_if_up ppp0 || is_if_up usb0 || {
	echo "no known interface is up" >&2
	false
    }
}

# var base directory
client_varbase () {
    local d="/var/run/vpn-tunnel_$(client_hash)"
    if [ ! -d "$d" ]; then
	(
	    #umask 077 # not really necessary though
	    mkdir "$d"
	)
    fi
    echo "$d"
}


# logging options; you may want to put this in /var/log/ instead, I
# was too lazy to set up log rotate and cleaning up /root/tmp already
# regularly
logfile=/root/tmp/vpn-tunnel.log
verb="--verb 1"

# user/group to run openvpn as; also use --chroot option to an
# existing directory
usergroup="--user chrisopenvpn --group chrisopenvpn \
    --chroot /usr/share/doc/openvpn/examples/sample-config-files/"

# in an attempt to reduce the risk for the key landing on disk, use a
# tmpfs
tempfilecmd="tempfile -d /lib/init/rw/"

# End of configuration.

# ------------------------------------------------------------

# If sshserver is just a hostname, resolve it by looking it up in the
# ssh client configuration
if echo "$sshserver" | grep -F . >/dev/null; then
    fqserver="$sshserver"
else
    fqserver="`ssh_config-ref "$sshserver" hostname`"
fi

quote () {
    printf '%q' "$1"
}


# doing/done messages:
prev_done="-"

printdone () {
    if [ "$prev_done" != "-" ]; then
	eval "echo $prev_done."
    fi
}

=== () {
    local msg="$1"
    local done="${2-done}"

    printdone
    prev_done="$done"
    echo -en "* $msg: "
}

===. () {
    printdone
    prev_done="-"
    echo OK.
}


usage () {
    set +x
    echo "usage: $0 start|stop|restart"
    exit 1
}

# openvpn invocations ('returning' bash code): (These can be fed a
# fake value that will override variables that are not known in stop
# invocations, for the purpose of generating a stable hash value for
# daemonize.)

openvpn_invocation_client () {
    local keyfile_client="${1-"$keyfile_client"}"
    echo "openvpn $openvpn_compression --remote "$fqserver" --dev $dev " \
	"--ifconfig $(quote "$ip_client") $(quote "$ip_server") $verb " \
	"--secret $(quote "$keyfile_client") $usergroup"
}

openvpn_invocation_server () {
    local keyfile_server="${1-"$keyfile_server"}"
    echo "openvpn $openvpn_compression --float --dev $dev " \
	"--ifconfig $(quote "$ip_server") $(quote "$ip_client") $verb " \
	"--secret $(quote "$keyfile_server") $usergroup"
}

# an ID we're using to identify our resources (vpn-tunnel instance)
client_hash () {
    openvpn_invocation_client stable | sha1sum | awk '{print $1}'
}


# The code generated by masq_code is run on the *server*

masq_code_() {
    echo "iptables -t nat \"$1\" POSTROUTING -p all \\"
    echo   "-s \"$2\" \\! -d \"$2\" -j MASQUERADE"
}

masq_code() {
    masq_code_ "$1" "$ip_client"
}


# rules matching exceptional traffic that should *not* go through the
# VPN:
iptables_AD () {
    local AD="$1"
    local clientlocalip="$2"
    # DHCP
    iptables -t mangle "$AD" OUTPUT -p udp --dport 67 \
	-j MARK --set-mark 0x1
    # openvpn's own traffic
    iptables -t mangle "$AD" OUTPUT -p udp --dport "$openvpn_port" \
	-j MARK --set-mark 0x1

    # for those marked, correct the source IP, as that's $ip_client
    # now by default
    iptables -t nat "$AD" POSTROUTING -m mark --mark 1 \
	-j SNAT --to-source "$clientlocalip"
}


start () {
    #set -x
    
    modprobe tun
    # not sure whether these are needed?:
    modprobe nf_conntrack_sip
    modprobe nf_nat_sip
    
    echo 1 > /proc/sys/net/ipv4/ip_forward
    
    keyfile_client=`$tempfilecmd`

    === "generating key"
    openvpn --genkey --secret "$keyfile_client"

    === "copying key to server\n" -
    keyfile_server=$(ssh root@"$sshserver" "$tempfilecmd")

    scp -p "$keyfile_client" root@"$sshserver":"$keyfile_server"
    
    === "starting remote openvpn instance" -
    ssh "$sshserver" 'set -eu
        modprobe tun
	modprobe nf_conntrack_sip
	modprobe nf_nat_sip
        echo 1 > /proc/sys/net/ipv4/ip_forward
        '"daemonize --out $(quote "$logfile") --bg --no-nice \\
	--hash-input $(quote "$(openvpn_invocation_server stable)") \\
	$(openvpn_invocation_server)"'
	'"$(masq_code -A)"'
	'

    === "starting local openvpn instance" -
    # (amazingly, set -e is in effect within the eval)
    eval "daemonize --out $(quote "$logfile") --bg --no-nice \\
        --hash-input $(quote "$(openvpn_invocation_client stable)") \\
        $(openvpn_invocation_client)"

    === "setting up routing on the client"
    # ! don't forgret to add cleanup in stop procedure for things you add here !

    local clientlocalip=$(get_clientlocalip)
    echo "$clientlocalip" > "$(client_varbase)"/clientlocalip

    # remove previous default route (and further down replace it with
    # a default route through the VPN)
    dfltroute=`ip route list | grep ^default`
    ip route del $dfltroute

    # but re-add previous default route for the exceptional traffic
    # marked by iptables_AD
    ip route add $dfltroute table 1
    ip rule add fwmark 1 lookup 1

    iptables_AD -A "$clientlocalip"

    # now that the exceptions are activated, add new default route via
    # VPN; have to retry until openvpn actually created the interface
    result=`tempfile`
    i=10
    ok=0
    while [ "$i" -gt 0 ]; do
	if ip route add default via "$ip_server" > "$result" 2>&1; then
	    ok=1
	    i=0
	else
	    sleep 1
	    i=$(( $i - 1 ))
	fi
    done
    if [ "$ok" -eq 0 ]; then
	cat "$result"
	false
    fi
    
    === "wait until started"

    # remove keyfiles quickly (they won't be accessible by the openvpn
    # binary after chroot anyway)
    i=20
    ok=0
    while [ "$i" -gt 0 ]; do
	if ping -q -w1 "$ip_server" > /dev/null; then
	    ok=1
	    i=0 #our [only] way to break, right??
	else
	    sleep 1
	    i=$(( $i - 1 ))
	fi
    done
    if [ "$ok" -eq 0 ]; then
	echo "could not get ping reply" >&2
	false
    fi

    === "cleanup"
    rm -f "$keyfile_client"
    ssh "$sshserver" "rm -f \"$keyfile_server\""
    
    === "copy over /etc/resolv.conf"
    tmp=`tempfile -d /etc/`
    ssh "$sshserver" 'cat /etc/resolv.conf' > "$tmp"
    chmod a+r "$tmp"
    mv /etc/resolv.conf /etc/resolv.conf.vpn-tunnel_$(client_hash)
    mv "$tmp" /etc/resolv.conf

    ===.
}

stop () {
    #set -x

    # stop openvpn *before* removing the routing, to avoid window of
    # loop

    === "stop openvpn on client"
    eval "daemonize --stop \\
        --hash-input $(quote "$(openvpn_invocation_client stable)") \\
	fakecmd" || true

    === "remove iptables routing entries"

    local clientlocalip=$(cat "$(client_varbase)"/clientlocalip)

    iptables_AD -D "$clientlocalip" || true
    ip rule del fwmark 1 lookup 1 || true

    # move original default route back to default table
    if dfltroute=`ip route list table 1 | grep ^default`; then
	ip route del $dfltroute table 1
	ip route add $dfltroute
    fi

    === "restore /etc/resolv.conf"
    mv /etc/resolv.conf.vpn-tunnel_$(client_hash) /etc/resolv.conf || true

    === "stop openvpn on server"
    ssh "$sshserver" 'set -eu
        '"daemonize --stop \\
	--hash-input $(quote "$(openvpn_invocation_server stable)") \\
	fakecmd || true"'
    	'"$(masq_code -D)"' || true
	' || true

    ===.
}


if [ $# -ne 1 ]; then
    usage
fi
	
case "$1" in
    start)
      start;;
    stop)
      stop;;
    restart_if_running)
      # always ok?
      stop
      start;;
    restart)
      stop || true
      start;;
    *)
      usage;;
esac
