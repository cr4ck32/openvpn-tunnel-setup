This is for easy and automatic setup of a VPN using openvpn in the
case where you've got root ssh access to the server, and, currently,
only have one client. It uses preshared keys, and ssh is used to share
the keys, get the necessary serverside information and set up and tear
down the openvpn daemon.

NOTE: a previous version of this script did selective routing of
traffic according to user/group ids; this has now been moved to a
separate 'selective' Git branch.


LIMITATIONS:

 - only tested on Debian

 - it currently probably only works for one client per server:
   the tunX interface name and IPs used for the VPN are configured
   statically in the script.

DEPENDENCIES:

 - on both the client and the server, it requires some tools from my
   "chj-bin" repository to be present and accessible in PATH
   (ssh_config-ref, daemonize, is_if_up). These could probably quite
   easily be replaced with something else or hard coded constants,
   though.

SETUP:

Install the dependencies on both client and server:

 * chj tools
    cd /opt; mkdir chj; cd chj
    git clone https://github.com/pflanze/chj-bin.git bin
    git clone https://github.com/pflanze/chj-perllib.git perllib
    mkdir -p /usr/local/lib/site_perl/
    ln -s /opt/chj/perllib/Chj/ /usr/local/lib/site_perl/
    # add /opt/chj/bin to PATH in /root/.bashrc

 * apt-get install openvpn

On client only:

 * cd /opt/chj
   git clone https://github.com/pflanze/openvpn-tunnel-setup.git
   # add to PATH if you like
 * vpn-tunnel start  # or stop|restart|startrouting|stoprouting|restartrouting|status

When the host interface (the interface where the encrypted traffic is
passing through) goes down, this needs to be issued:

 * vpn-tunnel stoprouting

and when the interface comes back up,

 * vpn-tunnel startrouting

Failing to issue the "stoprouting" (or "stop") command will lead to
the openvpn process on the client entering an endless recursion,
because when the host interface goes down it takes the route used by
openvpn with it and afterwards openvpn's own traffic will take the
route through the VPN, hence leading to more encapsulation of the
always same packet.

"stoprouting" and "startrouting" don't access the network, hence are
fast and "stoprouting" can be run when offline. "stop" and "start"
include stoprouting and startrouting calls. Unless there are
configuration changes or the client or server are rebooted, there's no
need to issue "stop"/"start"/"restart".

